{"version":3,"sources":["logo1.jpg","logo.svg","api.js","card/card.js","home/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getData","link","a","axios","get","card","props","state","data","this","setState","list","fetchDataAndSetState","prevProps","prevState","showdata","gutter","xs","sm","md","lg","className","style","marginLeft","marginTop","undefined","map","item","index","key","xl","width","margin","backgroundColor","boxShadow","bordered","name","main","temp","CheckCircleTwoTone","twoToneColor","size","Component","Sider","Menu","SubMenu","Layout","Header","Content","Footer","home","selectedMenu","handleClick","e","href","src","LOGO","height","overflow","position","left","mode","color","Item","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.718797cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo1.63ccb514.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nexport async function getData(link) {\r\n    return await axios.get(link);\r\n}","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { get } from 'https';\r\nimport {Col, Card, Spin, Row} from 'antd';\r\nimport { getData } from '../api';\r\nimport { SmileTwoTone, HeartTwoTone, CheckCircleTwoTone } from '@ant-design/icons';\r\n\r\nexport default class card extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          link: this.props.link\r\n        };\r\n      }\r\n\r\n      async fetchDataAndSetState(link){\r\n          var {data} = await getData(link);\r\n\r\n          this.setState({\r\n              data: data.list\r\n          });\r\n\r\n      }\r\n\r\n      async componentDidMount(){\r\n          await this.fetchDataAndSetState(\r\n              this.state.link\r\n          );\r\n      };\r\n\r\n      async componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.link !== this.props.link){\r\n            this.fetchDataAndSetState(this.props.link);\r\n        }\r\n      }\r\n    \r\n      render(){\r\n\r\n        const {data} = this.state;\r\n        const showdata = (\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }} className=\"center\" style={{marginLeft: '150px', marginTop : \"20px\"}}>\r\n                {data!==undefined ? (data.map((item,index) => (\r\n                    <Col key={index} xs={24} sm={24} md={8} lg={8} xl={8}>\r\n                        <Card  style={{ width: 'auto', margin: '10px', backgroundColor: 'rgba(224, 218, 202)', boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\"}} bordered={true}>\r\n                            <h6>{item.name} </h6>\r\n                            <p>Current Temperature: {item.main.temp}K  &nbsp;&nbsp; <CheckCircleTwoTone twoToneColor={item.main.temp>298 ? \"red\" : 273<item.main.temp<298 ? \"green\" : \"blue\" }/>\r\n                                </p>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                ))) : \r\n                \r\n                (\r\n                    <div  className=\"container center\">\r\n                        <Spin size='large'/>\r\n                    </div>\r\n                )}\r\n            </Row>\r\n        )\r\n\r\n          return(\r\n            <div className=\"center\">\r\n                {showdata}\r\n            </div>\r\n          );\r\n      }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport homes from './home.css';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\r\nimport axios from 'axios'\r\nimport LOGO from '../logo1.jpg';\r\nimport { SmileTwoTone, HeartTwoTone, CheckCircleTwoTone } from '@ant-design/icons';\r\nimport {\r\n  AppstoreOutlined,\r\n  BarChartOutlined,\r\n  CloudOutlined,\r\n  ShopOutlined,\r\n  TeamOutlined,\r\n  UploadOutlined,\r\n  VideoCameraOutlined,\r\n} from '@ant-design/icons';\r\nimport { get } from 'https';\r\nimport Card from '../card/card';\r\n\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nexport class home extends Component {\r\n    \r\n    state = {\r\n        link: null,\r\n        selectedMenu: null\r\n    }\r\n\r\n    \r\n    async componentDidMount(){\r\n        this.setState({\r\n            link: null,\r\n            selectedMenu: null\r\n        });\r\n    }\r\n\r\n    handleClick = e => {\r\n        this.setState({selectedMenu: e,\r\n            link : e==1 ? 'https://api.openweathermap.org/data/2.5/group?id=1273294,1851632,1275339,1269515,1269639,1269743,1273491,1277333,1275004,1264527,1255634,1269321,1262180,1269633,1269843,1253405&appid=397adabd8e6500dcc06fad5a0c19511d'\r\n            : e==2 ? 'https://api.openweathermap.org/data/2.5/group?id=2178896,2178933,2178982,2179466,2179538,2179581,2179631,2179639,2179670,2179682,2179756,2179780,2179794,2181818,2181872,2181997&appid=397adabd8e6500dcc06fad5a0c19511d'\r\n                : e==3 ? 'https://api.openweathermap.org/data/2.5/group?id=2147714,2144551,2144127,2144129,2144131,2144139,2144144,2143833,2143824,2143839,2143875,2148955,2149001,2149056,2149132,2149172&appid=397adabd8e6500dcc06fad5a0c19511d'\r\n                    : e==4 ? 'https://api.openweathermap.org/data/2.5/group?id=2012773,2012780,2012861,2012938,2012956,2012979,2013030,2013225,2013272,2014705,2014917,2014836,2014833,2016733,2016711,2021188&appid=397adabd8e6500dcc06fad5a0c19511d'\r\n                        : 'https://api.openweathermap.org/data/2.5/group?id=1248749,1248991,1249145,1223738,1223648,1230613,1230089,1234633,1239593,1244596,1244397,1246924,1246321,1246007,1244713,1242835&appid=397adabd8e6500dcc06fad5a0c19511d'\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n        const {link} = this.state;\r\n        \r\n\r\n        return (\r\n            <div>\r\n            <div className=\"navbar-fixed\">\r\n                <nav>\r\n                    <div className=\"nav-wrapper \">\r\n                        <a href=\"#\"><img src={LOGO} style={{width:'60px', height:'55px',  marginLeft:\"10px\", marginTop: \"5px\"}}/></a>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n            <Sider style={{ overflow: 'auto', height: '70vh', position: 'fixed', left: 0, backgroundColor:'#424242', marginTop:'0.5%'}}>                <Menu mode=\"inline\" style={{backgroundColor:'#424242', color:'white'}}>\r\n                    <Menu.Item key=\"1\" onClick={()=> this.handleClick(1)}>\r\n                    India\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\" onClick={()=> this.handleClick(2)}>\r\n                    New Zealand\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\" onClick={()=> this.handleClick(3)}>\r\n                    Australia\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"4\" onClick={()=> this.handleClick(4)}>\r\n                    Russia\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"5\" onClick={()=> this.handleClick(5)}>\r\n                    Sri Lanka\r\n                    </Menu.Item>\r\n                   \r\n                </Menu>\r\n                </Sider>\r\n                <div className=\"container\">\r\n                    {this.state.link===null? (\r\n                        <div>\r\n                        <br></br>\r\n                        <h5 className=\"center\"><i>Select a country</i></h5> \r\n                        <br></br>\r\n                        <h6 className=\"center\"><i> For temperatures more than 298K : <CheckCircleTwoTone twoToneColor=\"red\" /></i></h6>\r\n                        <br></br>\r\n                        <h6 className=\"center\"><i> For temperatures between 273K and 298K : <CheckCircleTwoTone twoToneColor=\"green\" /></i></h6>\r\n                        <br></br>\r\n                        <h6 className=\"center\"><i> For temperatures less than 273K : <CheckCircleTwoTone twoToneColor=\"blue\" /></i></h6>\r\n                        </div>\r\n                        ) : <Card link = {this.state.link} />}\r\n                </div>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default home\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'antd';\nimport Home from './home/home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}